in dev con:

@App.js
-> loads user
-> jumps to landing page

@Landing.js
-> check if user is authenticated 
--> if yes - redirect to /dashboard.js
--> if no - render landing page

@dashboard.js
-> load user's profile
-> render user's profile


@routes/api/carts.js
line 25 --> from here code has to be worked on 
--> question is: do I update user_id in cart object if user registers? I think put request. But how is the 
route end point beeing hit

answer:

@App.js
-> loads user
-> jumps to landing page

@Landing.js
-> check if user is authenticated 
--> if yes 
- load users cart

--> if no 
- create new cart
- render login link (directs to Login.js)
- render register link (directs to Register.js)

@Login.js
-> on login --> load user's cart

@Register.js
-> on registration 
--> update existing cart with user_id:

client side - registry form contains hidden field with current cart id which is beeing retrieved
from redux state --> post request is beeing send and processed server side in routes/api/users.js
in line :
const { firstname, lastname, email, password, cart_id } = req.body;

server side works

-----------------------

create line items

@client/component/product_site.js
-> user clicks add to cart button
-> that triggers a function which fires a post request 
-> take cart_id from state and send it to the back end via that post request (which has cart_id in it's body)
-> line-item object is beeing created in DB

line-item {
    product_id,
    cart_id,
} 

-> holds reference to correct cart by cart_id

@client/component/cart.js
-> renders line-items in a specific cart

pulling cart + line item from the db:

2 ways (I can think of):
1st:
-> loop through all the line item objects in db and find the ones with the correct cart_id
-> loop through all the product objects in db and find those with matching id as referenced in 
the line item objects

db structure:

collection carts:
cart: {
    _id: ...,
    user: ...
}

collection line-items:
line-item: {
    _id: .....,
    product_id: ...,
    cart_id: ...,
    quantity: 1
}

2nd:
-> loop through all the cart objects in db and find the one with the correct id
-> loop through all the product objects in db and find those with matching id as referenced in 
the objects in the line_items array 

db structure:

cart: {
    _id: ...,
    user: ...,
    line-items: [{
        line_item_id : {
            product_id: ...,
            quantity: 1
        },

        line_item_id : {
            product_id: ...,
            quantity: 1
        },

        line_item_id : {
            product_id: ...,
            quantity: 1
        },
    }]    
}

problem with 2nd implementation:
how to generate line_item_id?








