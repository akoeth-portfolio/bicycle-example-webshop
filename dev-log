in dev con:

@App.js
-> loads user
-> jumps to landing page

@Landing.js
-> check if user is authenticated 
--> if yes - redirect to /dashboard.js
--> if no - render landing page

@dashboard.js
-> load user's profile
-> render user's profile


@routes/api/carts.js
line 25 --> from here code has to be worked on 
--> question is: do I update user_id in cart object if user registers? I think put request. But how is the 
route end point beeing hit

answer:

@App.js
-> loads user
-> jumps to landing page

@Landing.js
-> check if user is authenticated 
--> if yes 
- load users cart

--> if no 
- create new cart
- render login link (directs to Login.js)
- render register link (directs to Register.js)

@Login.js
-> on login --> load user's cart

@Register.js
-> on registration 
--> update existing cart with user_id:

client side - registry form contains hidden field with current cart id which is beeing retrieved
from redux state --> post request is beeing send and processed server side in routes/api/users.js
in line :
const { firstname, lastname, email, password, cart_id } = req.body;

server side works

-----------------------

create line items

@client/component/product_site.js
-> user clicks add to cart button
-> that triggers a function which fires a post request 
-> take cart_id from state and send it to the back end via that post request (which has cart_id in it's body)
-> line-item object is beeing created in DB

line-item {
    product_id,
    cart_id,
} 

-> holds reference to correct cart by cart_id

@client/component/cart.js
-> renders line-items in a specific cart

pulling cart + line item from the db:

2 ways (I can think of):
1st:
-> loop through all the line item objects in db and find the ones with the correct cart_id
-> loop through all the product objects in db and find those with matching id as referenced in 
the line item objects

db structure:

collection carts:
cart: {
    _id: ...,
    user: ...
}

collection line-items:
line-item: {
    _id: .....,
    product_id: ...,
    cart_id: ...,
    quantity: 1
}

2nd (the one I chose):
-> loop through all the cart objects in db and find the one with the correct id
-> loop through all the product objects in db and find those with matching id as referenced in 
the objects in the line_items array 

db structure:

cart: {
    _id: ...,
    user: ...,
    line-items: [
        {
            _id: ...,
            product_id: ...,
            quantity: 1
        },

        {
            _id: ...,
            product_id: ...,
            quantity: 1
        },

        {
            _id: ...,
            product_id: ...,
            quantity: 1
        },
    ]    
}

express routes error handling

catch (err) {
        console.error(err);
        if (err.kind === 'ObjectId') {
            return res.status(404).json({ msg: 'User not found'})
        };
        res.status(500).send('Server Error');
    }
})    

@profiles.js
// @route   GET api/profile/user/:user_id
// @desc    Get profile by user ID
// @access  Public



@posts.js
// @route   GET api/posts/user/:user_id
// @desc    Get all post from a user
// @access  Public    

// @route   GET api/posts/:id
// @desc    Get post by id
// @access  Private    

// @route   DELETE api/posts/:id
// @desc    Delete post by id
// @access  Private    

// @route   PUT api/posts/like/:id
// @desc    Like a post
// @access  Private   

// @route   PUT api/posts/like/:id
// @desc    Unlike a post
// @access  Private    

// @route   POST api/posts/comment/:id
// @desc    Create a comment on a post
// @access  Private

// @route   UPDATE api/posts/comment/:post_id/:comment_id
// @desc    Update comment
// @access  Private  

// @route   DELETE api/posts/comment/:post_id/:comment_id
// @desc    Delete comment
// @access  Private    

// @route   PUT api/posts/like/:post_id/:comment_id
// @desc    Like a comment
// @access  Private    

// @route   PUT api/posts/comment/unlike/:post_id/:comment_id
// @desc    Unlike a comment
// @access  Private    

next up:

comments routing
-> logged in user can write comment for product
-> product model gets another property called comments which is an array of objects
-> objects have user_id, product_id and comment text + rating

done

next up:

client side: pulling products in cart from db 

-> query no. 1: get cart by user_id

-> cart has array with line item objects

-> each line item object has product_id

-> query no. 2: get product by product_id (in line item object)

next up:

react:

set up redux

products & product component

actions/product.js


next up:

product page
-> similar setup as on Products component wich has ProductItems component
-> Product component has ProductItem component
-> don't reuse ProductItems component because I want the product page to has a different layout than the items on the products page

next up:

write action createRating()